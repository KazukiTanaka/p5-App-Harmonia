package App::Harmonia::Generator::Model;
use strict;
use warnings;
use parent 'Class::Accessor::Fast';
use App::Harmonia;
use YAML::XS qw/LoadFile/;
use File::Path 'mkpath';
use String::CamelCase qw/camelize/;
use File::Basename qw/dirname/;

__PACKAGE__->mk_accessors(qw/
    schema
    options
/);

sub new {
    my ($class, %options) = @_;
    my $schema = LoadFile 'schema.yaml';
    return bless { schema => $schema, options => \%options }, $class;
}

sub generate {
    my ($self) = @_;

    my $tmpl_code = do { local $/; <DATA> };
    my $application_name = $self->options->{name};
    my $dirname = $self->options->{dirname};
    my $generate_dirname = "$dirname/$application_name/";

    foreach my $table_name (keys %{$self->schema}) {
        my $code = $tmpl_code;
        my $name = camelize $table_name;

        $code =~ s/__VERSION__/$App::Harmonia::VERSION/;
        $code =~ s/__CLASS__/$name/g;
        $code =~ s/__TABLE__/$table_name/g;
        $code =~ s/__APP__/$application_name/g;

        my $dirname = dirname "$generate_dirname/$name/Factory.pm";
        unless (-d $dirname) {
            mkpath($dirname) or die "Cannot create directory $dirname : $!";
        }
        open my $fh, '>', "$generate_dirname/$name/Factory.pm";
        print $fh $code;
        close $fh;
        print $code, "\n";
    }
}

1;

__DATA__
# This code was automatically generated by App::Harmonia (version __VERSION__)
package __APP__::__CLASS__::Factory;
use strict;
use warnings;
use __APP__::Entity::__CLASS__;
use __APP__::Core::DB;
use __APP__::Core::Config;
use __APP__::Core::Util qw/make_pointer make_relation make_date/;
use parent qw/Class::Accessor::Fast/;
__PACKAGE__->mk_accessors(qw/db/);

sub new {
    my ($class) = @_;
    my $self = $class->SUPER::new({ db => __APP__::Core::DB->new });
    return bless($self, $class);
}

sub make_by_id {
    my ($self, $object_id) = @_;
    my $data = $self->db->single('__TABLE__', {
        object_id => $object_id
    });
    return $self->__make_object($data);
}

sub __make_object {
    my ($self, $data) = @_;
    return (defined $data) ? __APP__::Entity::__CLASS__->new($data) : undef;
}

1;
